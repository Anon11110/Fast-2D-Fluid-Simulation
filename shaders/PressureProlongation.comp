#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, r16f) uniform readonly image2D coarse_grid_texture;
layout(set = 0, binding = 1, r16f) uniform image2D fine_grid_texture;

layout(push_constant) uniform MultigridPushConstants
{
    int fine_width;
    int fine_height;
    int coarse_width;
    int coarse_height;
} push_constants;

void main()
{
    ivec2 fine_coords = ivec2(gl_GlobalInvocationID.xy);
    if (fine_coords.x >= push_constants.fine_width || fine_coords.y >= push_constants.fine_height)
    {
        return;
    }

    ivec2 coarse_coords = fine_coords / 2;
    ivec2 offset = fine_coords % 2;

    float c00 = imageLoad(coarse_grid_texture, coarse_coords).r;
    float c10 = (coarse_coords.x + 1 < push_constants.coarse_width) ? 
                imageLoad(coarse_grid_texture, coarse_coords + ivec2(1, 0)).r : c00;
    float c01 = (coarse_coords.y + 1 < push_constants.coarse_height) ? 
                imageLoad(coarse_grid_texture, coarse_coords + ivec2(0, 1)).r : c00;
    float c11 = (coarse_coords.x + 1 < push_constants.coarse_width && 
                 coarse_coords.y + 1 < push_constants.coarse_height) ? 
                imageLoad(coarse_grid_texture, coarse_coords + ivec2(1, 1)).r : c00;

    float wx = float(offset.x) * 0.5;
    float wy = float(offset.y) * 0.5;

    float interpolated_correction = 
        mix(
            mix(c00, c10, wx),
            mix(c01, c11, wx),
            wy
        );

    float fine_value = imageLoad(fine_grid_texture, fine_coords).r;
    fine_value += interpolated_correction;
    
    imageStore(fine_grid_texture, fine_coords, vec4(fine_value, 0.0, 0.0, 1.0));
}
