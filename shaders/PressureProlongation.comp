#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, r16f) uniform readonly image2D coarse_grid_texture;
layout(set = 0, binding = 1, r16f) uniform writeonly image2D fine_grid_texture;

layout(push_constant) uniform MultigridPushConstants
{
    int fine_width;
    int fine_height;
    int coarse_width;
    int coarse_height;
} push_constants;

void main()
{
    ivec2 fine_coords = ivec2(gl_GlobalInvocationID.xy);
    if (fine_coords.x >= push_constants.fine_width || fine_coords.y >= push_constants.fine_height)
    {
        return;
    }

    ivec2 coarse_coords = fine_coords / 2;
    if (coarse_coords.x >= push_constants.coarse_width || coarse_coords.y >= push_constants.coarse_height)
    {
        return;
    }

    float base_value = imageLoad(coarse_grid_texture, coarse_coords).r;
    ivec2 offset = fine_coords % 2;

    float interpolated_value = base_value;
    if (offset.x == 1 && coarse_coords.x + 1 < push_constants.coarse_width)
    {
        float neighbor_x = imageLoad(coarse_grid_texture, coarse_coords + ivec2(1, 0)).r;
        interpolated_value += 0.5 * (neighbor_x - base_value);
    }
    if (offset.y == 1 && coarse_coords.y + 1 < push_constants.coarse_height)
    {
        float neighbor_y = imageLoad(coarse_grid_texture, coarse_coords + ivec2(0, 1)).r;
        interpolated_value += 0.5 * (neighbor_y - base_value);
    }
    if (offset.x == 1 && offset.y == 1 &&
        coarse_coords.x + 1 < push_constants.coarse_width && coarse_coords.y + 1 < push_constants.coarse_height)
    {
        float neighbor_xy = imageLoad(coarse_grid_texture, coarse_coords + ivec2(1, 1)).r;
        interpolated_value += 0.25 * (neighbor_xy - base_value);
    }

    imageStore(fine_grid_texture, fine_coords, vec4(interpolated_value, 0.0, 0.0, 1.0));
}
