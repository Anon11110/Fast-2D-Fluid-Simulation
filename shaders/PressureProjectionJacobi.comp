
#version 450

#include "PushConstants.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, r16f) uniform readonly image2D divergence_texture;
layout(set = 0, binding = 1, r16f) uniform readonly image2D previous_pressure_texture;
layout(set = 0, binding = 2, r16f) uniform writeonly image2D pressure_texture;
layout(set = 0, binding = 3) uniform sampler2D obstacle_mask_texture;

#include "Commons.glsl"

float LoadPressure(ivec2 coords)
{
    coords.x = (coords.x < push_constants.texture_width) ?
        ((coords.x < 0) ? abs(coords.x) - 1 : coords.x) :
        (2 * push_constants.texture_width - coords.x - 1);

    coords.y = (coords.y < push_constants.texture_height) ?
        ((coords.y < 0) ? abs(coords.y) - 1 : coords.y) :
        (2 * push_constants.texture_height - coords.y - 1);

    vec2 pixel_size = vec2(1.0) / vec2(push_constants.texture_width, push_constants.texture_height);
    vec2 sample_uv = (vec2(coords) + 0.5) * pixel_size;

    // If sampling point is in obstacle, use Neumann boundary condition by reflecting the pressure from the fluid side
    if (IsObstacle(sample_uv))
    {
        vec2 normal = CalculateNormal(sample_uv);
        ivec2 reflection = coords - 2 * ivec2(round(normal));
        reflection = clamp(reflection, ivec2(0), ivec2(push_constants.texture_width - 1, push_constants.texture_height - 1));
        return imageLoad(previous_pressure_texture, reflection).r;
    }

    return imageLoad(previous_pressure_texture, coords).r;
}

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    if (pixel_coords.x < 0 || pixel_coords.x >= push_constants.texture_width ||
        pixel_coords.y < 0 || pixel_coords.y >= push_constants.texture_height)
    {
        return;
    }

    vec2 pixel_size = vec2(1.0) / vec2(push_constants.texture_width, push_constants.texture_height);
    vec2 uv_coords = (vec2(pixel_coords) + 0.5) * pixel_size;

    float divergence = imageLoad(divergence_texture, pixel_coords).r;

    float pressure_right = LoadPressure(pixel_coords + ivec2(1, 0));
    float pressure_left = LoadPressure(pixel_coords + ivec2(-1, 0));
    float pressure_up = LoadPressure(pixel_coords + ivec2(0, 1));
    float pressure_down = LoadPressure(pixel_coords + ivec2(0, -1));

    float grid_spacing = max(1.0 / push_constants.texture_width, 1.0 / push_constants.texture_height);

    // Update pressure using Jacobi iteration
    float pressure = 0.25 * (pressure_right + pressure_left + pressure_up + pressure_down - divergence * grid_spacing * grid_spacing);

    if (push_constants.reset_flag)
    {
        pressure = 0.0;
    }

    imageStore(pressure_texture, pixel_coords, vec4(pressure, 0.0, 0.0, 1.0));
}
