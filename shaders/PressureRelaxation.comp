#version 450

#include "PushConstants.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, r16f) uniform readonly image2D divergence_texture;
layout(set = 0, binding = 1, r16f) uniform readonly image2D previous_pressure_texture;
layout(set = 0, binding = 2, r16f) uniform writeonly image2D pressure_texture;

float LoadPressure(ivec2 coords)
{
    coords.x = (coords.x < push_constants.texture_width) ? 
               ((coords.x < 0) ? abs(coords.x) - 1 : coords.x) : 
               (2 * push_constants.texture_width - coords.x - 1);

    coords.y = (coords.y < push_constants.texture_height) ? 
               ((coords.y < 0) ? abs(coords.y) - 1 : coords.y) : 
               (2 * push_constants.texture_height - coords.y - 1);

    return imageLoad(previous_pressure_texture, coords).r;
}

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    if (pixel_coords.x < 0 || pixel_coords.x >= push_constants.texture_width ||
        pixel_coords.y < 0 || pixel_coords.y >= push_constants.texture_height)
    {
        return;
    }

    ivec2 divergence_size = ivec2(push_constants.divergence_width, push_constants.divergence_height);
    ivec2 pressure_size = ivec2(push_constants.texture_width, push_constants.texture_height);

    ivec2 scaled_coords = pixel_coords * divergence_size / pressure_size;
    scaled_coords = clamp(scaled_coords, ivec2(0), divergence_size - ivec2(1));

    float divergence = imageLoad(divergence_texture, scaled_coords).r;

    float pressure = LoadPressure(pixel_coords);
    float pressure_right = LoadPressure(pixel_coords + ivec2(1, 0));
    float pressure_left = LoadPressure(pixel_coords + ivec2(-1, 0));
    float pressure_up = LoadPressure(pixel_coords + ivec2(0, 1));
    float pressure_down = LoadPressure(pixel_coords + ivec2(0, -1));

    float grid_spacing = max(1.0 / push_constants.texture_width, 1.0 / push_constants.texture_height);

    // Jacobi iteration for pressure correction
    pressure = 0.25 * (pressure_right + pressure_left + pressure_up + pressure_down - divergence * grid_spacing * grid_spacing);

    if (push_constants.reset_flag)
    {
        pressure = 0.0;
    }

    imageStore(pressure_texture, pixel_coords, vec4(pressure, 0.0, 0.0, 1.0));
}