#version 450

#include "PushConstants.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D velocity_texture;
layout(set = 0, binding = 1) uniform sampler2D color_texture;
layout(set = 0, binding = 2, rgba8) uniform writeonly image2D output_color_texture;
layout(set = 0, binding = 3) uniform sampler2D obstacle_mask_texture;

#include "Commons.glsl"

const int advect_iterations = 10;

// This function prevents color leakage at obstacle boundaries caused by texture interpolation
// But it impacts performance due to multiple texture samplings of surrounding pixels
vec4 SampleColorSafe(vec2 uv)
{
    vec2 pixel_size = 1.0 / vec2(push_constants.texture_width, push_constants.texture_height);

    ivec2 center = ivec2(floor(uv * vec2(push_constants.texture_width, push_constants.texture_height)));
    vec2 frac_coord = fract(uv * vec2(push_constants.texture_width, push_constants.texture_height));

    bool has_obstacle = false;
    for(int dy = -1; dy <= 1; dy++)
    {
        for(int dx = -1; dx <= 1; dx++)
        {
            ivec2 coord = center + ivec2(dx, dy);
            vec2 sample_uv = (vec2(coord) + 0.5) * pixel_size;
            if(IsObstacle(sample_uv))
            {
                has_obstacle = true;
                break;
            }
        }
    }

    if(has_obstacle)
    {
        vec2 center_uv = (vec2(center) + 0.5) * pixel_size;
        vec2 best_uv = center_uv;
        float min_dist = 999999.0;
        bool found_safe = false;

        for(int dy = -1; dy <= 1; dy++)
        {
            for(int dx = -1; dx <= 1; dx++)
            {
                if(dx == 0 && dy == 0) continue;

                ivec2 check_coord = center + ivec2(dx, dy);
                vec2 check_uv = (vec2(check_coord) + 0.5) * pixel_size;

                if(!IsObstacle(check_uv))
                {
                    vec2 offset = vec2(dx, dy) - frac_coord;
                    float dist = dot(offset, offset);

                    if(dist < min_dist)
                    {
                        min_dist = dist;
                        best_uv = check_uv;
                        found_safe = true;
                    }
                }
            }
        }

        if(!found_safe)
        {
            return vec4(0.0, 0.0, 0.0, 1.0);
        }

        return texture(color_texture, best_uv);
    }

    return texture(color_texture, uv);
}

vec2 GetVelocity(vec2 uv)
{
    vec2 velocity = texture(velocity_texture, uv).rg;
    vec2 wrap = vec2(1.0);

    if (uv.x < 0.0 || uv.x > 1.0) wrap.x = -1.0;
    if (uv.y < 0.0 || uv.y > 1.0) wrap.y = -1.0;

    return wrap * velocity;
}

vec2 ComputeColorGradient(vec2 uv, vec2 pixel_size, float step_size)
{
    if (IsObstacle(uv + vec2(pixel_size.x, 0.0)) ||
        IsObstacle(uv + vec2(-pixel_size.x, 0.0)) ||
        IsObstacle(uv + vec2(0.0, pixel_size.y)) ||
        IsObstacle(uv + vec2(0.0, -pixel_size.y)))
    {
        return vec2(0.0);
    }

    vec3 color_right = texture(color_texture, uv + vec2(pixel_size.x, 0.0)).rgb;
    vec3 color_left  = texture(color_texture, uv + vec2(-pixel_size.x, 0.0)).rgb;
    vec3 color_up    = texture(color_texture, uv + vec2(0.0, pixel_size.y)).rgb;
    vec3 color_down  = texture(color_texture, uv + vec2(0.0, -pixel_size.y)).rgb;

    return 0.5 * vec2(length(color_right - color_left), length(color_up - color_down)) / step_size;
}

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    if (pixel_coords.x < 0 || pixel_coords.x >= push_constants.texture_width ||
        pixel_coords.y < 0 || pixel_coords.y >= push_constants.texture_height)
    {
        return;
    }

    vec2 pixel_size = vec2(1.0) / vec2(push_constants.texture_width, push_constants.texture_height);
    vec2 uv_coords = (vec2(pixel_coords) + 0.5) * pixel_size;
    float step_size = max(pixel_size.x, pixel_size.y);
    float local_delta_time = push_constants.delta_time / float(advect_iterations);

    if (IsObstacle(uv_coords))
    {
        return;
    }

    vec2 traced_uv = uv_coords;

    // Advect color using semi-Lagrangian method
    for (int i = 0; i < advect_iterations; i++)
    {
        vec2 color_gradient = ComputeColorGradient(uv_coords, pixel_size, step_size);
        vec2 velocity = GetVelocity(uv_coords);
        vec2 delta_velocity = velocity * min(dot(velocity, color_gradient), 0.0);
        velocity -= delta_velocity;

        vec2 delta_coords = velocity * pixel_size / step_size * local_delta_time;
        vec2 next_uv = traced_uv - delta_coords;

        if (IsObstacle(next_uv))
        {
            vec2 normal = CalculateNormal(next_uv);

            float dot_product = dot(velocity, normal);
            vec2 reflection = velocity - 2.0 * dot_product * normal;

            // Apply slip boundary condition
            vec2 tangential = reflection - dot(reflection, normal) * normal;

            // Scale back the movement to stay along boundary
            float remaining_time = local_delta_time * (1.0 - length(traced_uv - next_uv) / length(delta_coords));
            if (remaining_time > 0.0)
            {
                vec2 slip_delta = tangential * pixel_size / step_size * remaining_time;
                vec2 slip_next_uv = traced_uv + slip_delta;

                if (!IsObstacle(slip_next_uv))
                {
                    traced_uv = slip_next_uv;
                }
            }
            break;
        }
        else
        {
            traced_uv = next_uv;
        }
    }

     vec4 advected_color = SampleColorSafe(traced_uv);
//    vec4 advected_color = texture(color_texture, traced_uv);

    if (push_constants.reset_flag)
    {
        advected_color = vec4(0.0, 0.0, 0.0, 1.0);
    }

    imageStore(output_color_texture, pixel_coords, advected_color);
}